Authentication

You can connect to git repos using different methods:

  git          - tested
  git+ssh      - tested, password requests are handled by askpass.rb 
  http, https  - auth uses SSH_ASKPASS
  rsync        - not tested
  
Authentication:

  - SSH: Question "add to known hosts? yes/no" is handled by askpass.rb script.
  - SSH: Passphrase-protected SSH keys are intercepted by Mac OS X dialog completely.
  - SSH: Regular SSH password is gathered using askpass.rb script.
  - HTTP: askpass: Username and then password or only password (when username is given as a part of URL)

Remembered passwords and user names should be available in the settings and asked only once.

Solution:

askpass should be an Objective-C command line program which passes environment and question to the distributed object. Name of the object is passed through environment. For each task we create a new vended object - GBAskPass.

GBAskPass should be used for ls-remote, push/pull/fetch tasks. It stores and reads data from the Keychain and notifies its delegate about the requests for the data.

QUESTION: how to block the askpass program while the main window is presenting a prompt? 
Answer 1: We can have a runloop and create a local vending object to wait for reply. 
Answer 2: We can simply wait and retry until we are told to cancel or get some username/password. (This is much simpler.)

REMEMBER: if you need to do some git queries while authenticating, it should not be done in the default dispatch queue. Otherwise it will deadlock.

Workflow example:

- user presses "push" button
- push wrapper task is launched
- push wrapper adds self to GBAskPass shared instance as a client
- push wrapper launches the actual push task with askpass client id
- if push task needs a username or password, it contacts GBAskPass which notifies push wrapper
- now push wrapper can respond with a data or present UI to do so
- when the data is ready, push wrapper tells GBAskPass what value to return (GBAskPass stores a dictionary of values per client id and sends them to remote clients when they ask)
- if the push wrapper asks user for credentials, it then stores them in the keychain.
- when push task finishes with an authentication error, push wrapper presents a login UI with an error message.
- if the user cancels authentication, push wrapper will ignore the result.
- what to do with autofetch? Overall behaviour is the same as with manual operation, but if the user cancelled authentication, then remember not to ask it again during lifetime of the process. (But still try to use keychain data when it becomes available.)

Steps to implement:

+ 1. GBAskPassServer.
+ 2. Client target which should always be compiled and bundled with the main application.
+ 3. Target should contact GBAskPass server which displays a simple prompt.
+ 4. GBAskPassController class which acts as a wrapper for ls-remote/push/pull/fetch tasks.
+ 5. Wrapping necessary tasks with GBAskPassController.
- 5.5. Wrap clone and submodules clone tasks with GBAskPassController.
- 6. Keychain support in GBAskPassController.
- 7. Also: refactor OATask to know nothing about askpass and keychain, but use environment property to customize the environment.
- 8. SECURITY: should think how not to expose password to some phony application. (Not a problem with Mac App Store as the app is installed by system and cannot be modified without a root access.)

