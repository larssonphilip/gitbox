
1. Stage area data mapping

Problem: when status of the change is updated, the UI selection is lost (because binding source changes)

Solution: keep the dictionary of the items (key is path) and update them instead of creating new ones.



2. Block-based API to invoke tasks

Objects: controller, model, task, task manager, activity 




3. FSEvents and app operations.

App listens to fsevents only when window is not active to avoid triggering 
updates when the app itself runs git commands.

App listens to both root folder (./) and .git folder. Need to investigate 
how the events are differentiated...


4. Different kinds of repository controllers

RepositoriesController makes distinction between types of objects and sends appropriate notifications (didSelectLocalRepo, didSelectCloningRepo etc.)



Menu:

- stage/unstage
- commit
- fetch
- pull
- push

- show difference   - only when modified
- reveal in finder  - only for the existing files (dstURL)
- extract file      - only for the historical files (dstURL)
- ignore            - only for the stage changes
- revert            - only for the stage changes
- delete            - only for the stage changes

- open repo in terminal
- open repo in finder
- edit remotes
- edit .gitignore
- edit .git/config
- edit .gitconfig



