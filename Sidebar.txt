
Sidebar.txt

January 25: we have several issues with sidebar design like unclean drag/drop handling, buggy embedded views management and in-place updates.

What we need to support

1. Heterogeneous recursive items: sections, repos, groups, submodules which are repos containing other submodules, github accounts and repos, shared computers and shared repos etc.
2. Drag and drop with item-specific rules: insertion of external items, reordering existing items. 
3. Persistance: storing the items, collapsed status.
4. Embedded views: displaying spinners, buttons, indicators.
5. State replacement: switching UI after cloning the repo and updating the sidebar item. 

Also, the current design of window controller is not optimal - it is a heavy center updating all the major view controllers as a delegate to all model controllers. This should be distributed among every view controller using notifications.

AppDelegate:
- create window controller
- create repositories controller
- tell window controller about repositories controller
- load window state
- add dropped repositories

WindowController:
- create two-pane split view: for sidebar and its detail view
- create sidebar controller
- create toolbar
- tell the sidebar about toolbar
- tell the sidebar about the right pane
- load the state of the sidebar
- forward some actions (with validations) to the toolbar
- adjust the toolbar buttons alignment when resizing the split view

SidebarController:
- create a two-pane view for the right window pane
- create a repository view controller
- create a clone view controller on demand
- create a submodule download view controller on demand
- subscribe to repositories controller notifications
- subscribe to repository controller, group notifications etc.
- load the GBSidebarItems from user defaults
- update the sidebar on changes
- handle drag and drop
- update toolbar according to the selected item
- when changing selected repository, switches the history controller

SidebarItem:
- Flavours of items:
  - Root item (invisible)
  - Section: Repositories, Shared, Github, Watched, Beanstalk
  - Local Repositories Group
  - Local Repository
  - Submodule
  - Github: Pull Request
  - Github: Account
  - Github: Repository

- Item should control which view is displayed in the right pane

- GBSidebarItem provides the subitems and appearance options: cell, title, icon, badge etc.
- GBSidebarItem has a delegate that provides up-to-date info and helps to react to events.

Sidebar Event Flow:
- set the root sidebar item.




HistoryController:
+ create a table view with bindings to a list of commits
+ subscribe to repository controller notifications and update commits when needed
- handle search
+ when changing selected commit, updates the changes controller

StageController:
+ has a table view, a text view
+ subscribes for notifications from repository controller to update the list of changes

Model Controllers:

+ receive actions
Â± post notifications which will be consumed by view controllers to update their states.

----------------------------------------------------------------------------------------------

How to migrate to this wonderful design from where we are?

- Prefer changes closer to UI
- Prefer smaller final changes - start from the ends with less dependencies
- When needed, add new functionality on the side with the existing one. Mark existing functionality as obsolete.

The migrations steps are:

+ make the stage work with notifications and repository controller. Needs testing.
+ make the commit view controller work with notifications, repo ctrl and commit.
+ make history work with additional view, repo ctrl, notifications.
- make sidebar update history controller based on notifications from misc controllers.
- make 2-pane split view for sidebar and 2-pane view for history+stage
- make clone controllers work with independent notifications.
- make sidebaritem objects with delegate == actual model controller
- after-clone code should be inside model controllers, view controllers should just refresh their views when done.

- make sidebar items as independent objects, load their state on launch, drag-drop etc.



Notification helpers:

1. Post notification:
  
  [self notifySelector:@selector(repositoryDidUpdateChanges:)];

2. Subscribe to notification:

  [repositoryController addObserver:self forSelector:@selector(repositoryDidUpdateChanges:)];

3. Unsubscribe from notification:

  [repositoryController removeObserver:self forSelector:@selector(repositoryDidUpdateChanges:)];
  [repositoryController removeObserver:self forSelector:@selector(repositoryDidUpdateChanges:)];



