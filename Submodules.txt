Во-первых, в два шага: первый - отображение и апдейт уже имеющихся субмодулей, второй шаг - добавление нового субмодуля.

Первый шаг: отображение субмодуля:

- субмодули все рисуются в сайдбаре вложенными в репо.
- при нажатии стрелки вправо, репо раскрывается, если свернуто, либо ты прыгаешь в историю, как сейчас.
- GBSubmodule имеет ссылку на свой личный GBRepositoryController, который тоже имеет субмодули и так далее рекурсивно.
- если GBRepositoryController вложен больше, чем на 42 уровня, мы выкидываем алерт и прекращаем делать что-либо про субмодули внутри такого репозитория
- при открытии репозитория, git submodule init делается автоматом, если нужно
- нескачанный субмодуль рисуется с кнопкой download в сайдбаре, которая делает git submodule update
- беджики и спиннеры для субмодуля наследуются из его GBRepositoryController-а
- меню для субмодуля как и для репо, но нет пункта про remove from sidebar.
- таскать субмодули внутри сайдбара нельзя вообще, или, если это не слишком сложный код, таскаются только в пределах своего репо чтобы сортироваться
- таскать субмодуль за пределы аппа можно как и другие репы

В стейдже:

- если HEAD субмодуля изменился, его должно быть видно в стейдже и его можно добавить галочкой. Тут нужно подумать как это организовать.
- перед добавлением на стейдж, нужно проверить, нет ли в субмодуле незакоммиченных файлов. Если есть - кинуть алерт про это.
- перед добавлением на стейдж, нужно проверить, нет ли в субмодуле непушнутых коммитов в текущую whatever ветку. Если есть - кинуть другой алерт.
- подумать как будет выглядеть перетаскивание субмодуля в другую папку
- подумать как будет выглядеть удаление субмодуля
- подумать как будет выглядеть удаление субмодуля на сервере когда у нас он тут есть
- подумать как будет выглядеть конфликт, если на сервере один хед субмодуля, а у нас другой.


Второй шаг: добавление субмодуля

- базовый интерфейс - просто клонирование любого репо внутрь репо
- стейдж должен показать новое репо
- тонкость: git submodule add требует URL. Его можно угадать из репо, но его может там не быть. Плюс, мы можем захотеть другой URL. Нужно подумать как с этим быть. Скорее всего потребуется панель settings, про которую отдельная история.



Notes:
- when submodule is added (via "git submodule add"), but not committed yet, it's not visible in right pane as staged.
- when repo with submodule is cloned, sidebar should display submodule with "download" button.
- when submodule is cloned into repo, it should appear on stage as "new submodule" + on checkbox click should "git submodule add" using submodule's current branch url. If no url, issue an error and cancel. 
- when submodule is added (staged), should call "git submodule status" and update both sidebar and stage area.
- since we have different ways to load changes and sometimes have submodule in them, sometimes don't, we need to call "git submodule status" to get absolute truth on SM state and update list of changes accordingly (by updating existing changes or adding new ones).
- git strange behaviour: when "git submodule add <url> <path>" is called within repo without remote, git complains. --force does not help.


Later, revisit these cases:

- submodules: case 1: user clones a repo which has some submodules => needs init, display "download" button for submodules in sidebar
- submodules: case 2: user pulls a repo which has some submodules updated => needs pull
- submodules: case 3: user pulls a repo which has some submodules updated, but his submodule itself is checked out on some branch => needs fetch, not pull
- submodules: case 4: user clones the repo inside the repo => needs to display as a non-tracked submodule which can be tracked
- submodules: case 5: user tries to commit a submodule which has the HEAD non-pushed (or dirty directory) - show warning or ask to push manually; show button "show module"



Decision:

we once wanted to only display a particular repo once in the whole sidebar. That is, if you have a library L
and it is a submodule in application A, we wouldn't feature L repository twice. However, this is too broad of an assumption
to make. Some people have .git in their home directory (not because they keep everything under version control, they may
only keep .emacs or .zprofile or other dot files). This would result in EVERYTHING being treated as a submodule in that
topmost repository.