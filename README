
Strategy for the first shippable version:

- log: list of unmerged commits from remote branch
- log: highlight new commits (missing on remote branch) 
- changes for the commit
- test merge conflict situation
- repos: add
- repos: edit
- log: checkout a commit


Bugs:

- disable status table view while status is updating (double click on a stale row crashes the app)
  (or better: reuse matching changes to avoid that issue and avoid flickering and UI blocking)
- OK button does not work in prompt because textfield value is updated through binding yet.
- table row selection is ignored if was no selection for ArrayController. Should check NSTableView selectedRowIndexes?
- when opened git.git repo spinner spins forever


UI glitches:

- disable menu item "commit" if commit button is disabled
- disable push button and push menu item if remote branch has unmerged commits


UI goodies:

- change "sync" button title to "push" when remote is not ahead of local branch
- change "sync" button title to "pull" when remote is ahead of local branch
- change "sync" button title to "merge" when remote is local
- reread remotes on focus: if the names and urls are the same, do not ls-remote
- do ls-remote in background starting on unfocus
- switch off 1min sync with a menu item: useful on battery
- remember chosen remote branch for the local branch in prefs
- recently opened files
- log: mark as read/unread + automatic mark as read


To do next:

- check out a branch from the commit item
- change "remote branch" label to "other branch" when remote is local
- add "load more" cell in the bottom of the log
- handle new repo: push to a new master branch
- handle pushing to a new branch: allow branch creation in "remote branch" dropdown
- clone a repo from the gui (menu item)
- create a new repo from the gui (by dropping a non-git folder)
- create a default .gitignore when creating a repo
- edit .gitignore
- edit .git/config
- create a new tag


Later:

- maybe put errors in a floating panel
- stash/apply stash from the menu, context menu
- maybe: easy/hidden rebase to keep history clean?
- assign colors to repos to distinguish them


Done:

+ log: list of commits (last 500 commits)
+ prompt for a name when checking out a new branch
+ check out a branch from the remote one
+ fetch current remote branch every minute
+ add "stage" cell in the top of the log - shows stage and working directory status
+ right pane: changes (files)
+ open FileMerge.app with opendiff command
+ checkout a branch
+ checkout new branch
+ checkout tag
+ checkout remote branch
+ checkout tags as well
+ push
+ pull
+ changes for the stage
+ show FileMerge
+ delete an untracked file
+ revert file to committed state
+ commit


Strange things:

- if a lazy accessor is bound, there can be infinite loop on setter call; perhaps should not use setter within a getter


Not to do:

- git blame: rare function, needs specific file listing UI; make another app;


Useful commands:

- list of SHA1 commit ids: git rev-list --format=raw --max-count=500 --skip=0 HEAD
- changes within a commit: git diff-tree df586737bc78d556b1ee5cfc567bbdee74b627b8 --no-commit-id
- changes on the stage: git diff-index --cached --ignore-submodules -z HEAD
- changes on the working directory (not including staged): git diff-files --ignore-submodules -z
- untracked files: git ls-files --other --exclude-standard -z

$ man git-diff-tree:

       git-diff-index <tree-ish>
           compares the <tree-ish> and the files on the filesystem.

       git-diff-index --cached <tree-ish>
           compares the <tree-ish> and the index.

       git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>...]
           compares the trees named by the two arguments.

       git-diff-files [<pattern>...]
           compares the index and the files on the filesystem.

