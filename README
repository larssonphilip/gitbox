Code to do:

+ custom window controller to handle little UI events (see Napoleon.app)
+ instead of NSDocumentController use AppDelegate to keep track of window controllers
+ use window controller instead of MyDocument
+ make AppDelegate a delegate for NSOpenPanel to validate folder
+ open a folder when dragged onto Dock icon
- GBOp and GBAsynchoronousOp as a wrapper around git commands
- GBLogOp to read log back in time
- GBShowOp to read commit data for the given commitid
- add an NSTask wrapper to run git commands (like in Moriarity sample code)
- reset toolbar buttons to default/empty/disabled state
- load local branches


To do:

- prompt for a name when checking out a new branch
- check out a branch from the remote one
- check out a branch from the commit item
- change "sync" button title to "push" when remote is not ahead of local branch
- change "sync" button title to "pull" when remote is ahead of local branch
- change "sync" button title to "merge" when remote is local
- change "remote branch" label to "other branch" when remote is local
- fetch current remote branch every minute
- open a window per repo
- remember tracking in .git/config when switching a remote branch
- left pane: log for current local branch
- add "stage" cell in the top of the log - shows stage and working directory status
- add "load more" cell in the bottom of the log
- right pane: changes (files)
- handle new repo: push to a new master branch
- handle pushing to a new branch: allow branch creation in "remote branch" dropdown
- switch off 1min sync with a toolbar button: useful on battery
- clone a repo from the gui (menu item)
- create a new repo from the gui (by dropping a non-git folder)
- checkout tags as well
- create a new tag
- assign colors

- stash/apply stash from the menu, context menu

- maybe: easy/hidden rebase to keep history clean?


Not to do:

- toolbar item for stash/unstash: rare function;
- git blame: rare function, needs specific file listing UI; make another app;

Useful commands:

- list of SHA1 commit ids: git rev-list HEAD
- changes within a commit: git diff-tree df586737bc78d556b1ee5cfc567bbdee74b627b8 --no-commit-id
- changes on the stage: git diff-index --name-status --ignore-submodules HEAD
- changes on the working directory: git diff-files --name-status --ignore-submodules
- untracked files: git ls-files --other --exclude-standard

- paths for staged changes: git diff -M -C --find-copies-harder -l64 --stat --cached | tail -r | tail -n +2 | tail -r | awk '{ print $1 }'
