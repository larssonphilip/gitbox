Strategy for the first shippable version:
- local branches:
  + checkout a branch
  + checkout new branch
  + checkout tag
  + checkout remote branch
- remote branches:
  - push
  + pull
- show log
  - list of commits
  - list of unmerged commits from remote branch
  - highlight new commits (missing on remote branch) 
  - checkout a commit
- show changes
  + changes for the stage
  - changes for the commit
  + show FileMerge
  - delete an untracked file
  - revert file to committed state
  + commit
- repos
  - add
  - delete

Bugs:
- disable status table view while status is updating (double click on a stale row crashes the app)
  (or better: reuse matching changes to avoid that issue and avoid flickering and UI blocking)
- OK button does not work in prompt because textfield value is updated through binding yet.
- table row selection is ignored if was no selection for ArrayController. Should check NSTableView selectedRowIndexes?

-----------------------------------
To do now:

+ read remotes from git/config
- load ls-remote info for each remote
- pull
- reread remotes on focus: if the names and urls are the same, do not ls-remote
- do ls-remote in background starting on unfocus
+ disable pull/push and current branch while pulling
- push
- fetch if push failed
- disable pull/push and remote branch while pushing
- fetch in background when unfocused


-----------------------------------

Note on remote branches:
- branches sometimes could be found in .git/refs/remotes/<alias>/<branch-name>
- branches sometimes could be found in .git/info/refs 
- git rev-parse can always tell the commit id for any commitish (but we usually do not need it)
- when remote branch is missing, user can add it.
- we should remember remote branches somewhere for gitbox to avoid messing with .git mess.
- we should also be able to add/remove repos
- for non-existing remote branch we should disable pull button
- use 'git ls-remote --tags --heads' to update remote branches
+ how do we list remote repositories? looking into refs/remotes is not sufficient, we should consult .git/config: 'git config --list'
+ how to make an activity indicator? port an object from the iphone and bind enabled property to it's current state
- bind menu to remote.branches to update when it is changed


To do:

- edit repositories
- show log (last 5000 commits)
- "what's new": diff with other branch is shown as grey commit rows in the same log
- errors in NSAlert switch window focus which leads to repeated request: when repo is just initialized git-rev-log fails
  (maybe put errors in a floating panel)
- see NSUserInterfaceValidations to disable menu items (especially for context menus)

+ prompt for a name when checking out a new branch
+ check out a branch from the remote one
- check out a branch from the commit item
- change "sync" button title to "push" when remote is not ahead of local branch
- change "sync" button title to "pull" when remote is ahead of local branch
- change "sync" button title to "merge" when remote is local
- change "remote branch" label to "other branch" when remote is local
- fetch current remote branch every minute
+ open a window per repo
- remember tracking in .git/config when switching a remote branch
- left pane: log for current local branch
+ add "stage" cell in the top of the log - shows stage and working directory status
- add "load more" cell in the bottom of the log
+ right pane: changes (files)
+ open FileMerge.app with opendiff command
- handle new repo: push to a new master branch
- handle pushing to a new branch: allow branch creation in "remote branch" dropdown
- switch off 1min sync with a menu item: useful on battery
- clone a repo from the gui (menu item)
- create a new repo from the gui (by dropping a non-git folder)
- create a default .gitignore when creating a repo
+ checkout tags as well
- create a new tag
- edit .gitignore
- edit .git/config
- assign colors to repos to distinguish them
- recently opened files
- stash/apply stash from the menu, context menu

- maybe: easy/hidden rebase to keep history clean?


Strange things:

- if a lazy accessor is bound, there can be infinite loop on setter call; perhaps should not use setter within a getter

Not to do:

- toolbar item for stash/unstash: rare function;
- git blame: rare function, needs specific file listing UI; make another app;

Useful commands:

- list of SHA1 commit ids: git rev-list HEAD
- changes within a commit: git diff-tree df586737bc78d556b1ee5cfc567bbdee74b627b8 --no-commit-id
- changes on the stage: git diff-index --cached --ignore-submodules -z HEAD
- changes on the working directory (not including staged): git diff-files --ignore-submodules -z
- untracked files: git ls-files --other --exclude-standard -z

$ man git-diff-tree:

       git-diff-index <tree-ish>
           compares the <tree-ish> and the files on the filesystem.

       git-diff-index --cached <tree-ish>
           compares the <tree-ish> and the index.

       git-diff-tree [-r] <tree-ish-1> <tree-ish-2> [<pattern>...]
           compares the trees named by the two arguments.

       git-diff-files [<pattern>...]
           compares the index and the files on the filesystem.

