

Ways to organize long-running tasks:
1. Blocking - caller should manage the queues and synchronization.
2. Async - caller gets a call back when task is finished.


- Need a clear state machine for every object - controller etc.
- Nested objects (submodules) should be coordinated with their parents and use the common queue with them.
- There should not be principle difference between "read" and "update" operations - both should be queueable and both may have side effects.
- For certain operations disable the UI until previous operations are finished. E.g. when updating stage, keep "pull" button enabled, but when it's pressed, queue "git pull" and disable pull/push ui.
- acknowledge fsevents only if haven't done any activity in 10 seconds.
- use fs events for only detecting unavailable repo.






















USE CASES:

- group: perform the block once all other blocks are finished or were not called at all (OABlockGroup).

  task 1:       |---->|
  task 2:       |------->|
  task 3:       |-->|
  group block:           |---->|

- queue: perform at most N blocks at once, proceed with other submitted blocks as the running operations yield (OABlockQueue)

  Queue with concurrency = 2
  task 1:   |--->|
  task 2:   |------->|
  task 3:        |----------->|
  task 4:            |-->|
  task 5:                |-->|
  task 6:                    |--->|
  task 7:                     |------>|

- coalesced task: if task is already running, attach block to its callback; otherwise start a new task or call back immediately.

  Case 1: second callback is attached to a running task
  
  call 1:  |-------->Callback
  call 2:       |....Callback
  
  Case 2: second callback is called immediately when task has already finished ("run once" task):
  
  call 1:  |-------->Callback
  call 2:                      |Callback
  
  Case 3: task is started again if not already running:
  
  call 1:  |-------->Callback
  call 2:                      |------->Callback
  

SNIPPETS:



Async w/o coalescing:

[self doSomething:block];

Async with coalescing:

(See OABlockTable instead of OABlockMerger)

[self.blockMerger performIfNotRunningForKey:@"MySpecificOperation" block:^{
  [self doSomething:^{
    [self.blockMerger didFinishKey:@"MySpecificOperation"];
  }];
} completionHandler:block];

[self.blockMerger performOnceForKey:@"MySpecificOperation" block:^{
  [self doSomething:^{
    [self.blockMerger didFinishKey:@"MySpecificOperation"];
  }];
} completionHandler:block];





