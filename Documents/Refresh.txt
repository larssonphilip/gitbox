
Gitbox needs to perform several updates to be in sync with the Git repository:

1. Stage
2. Submodules
3. Local refs
4. Remote refs
5. Commits (history): depends on state of:
   - local ref
   - selected remote ref
   - search state

API for updating a "feature" F:

- setNeedsUpdateFeature
- waitUpdateFeature:^{ ... }

State: (move this to the object)
- needsUpdateFeature
- needsUpdateFeatureAfterCurrentUpdate // set to YES if update is in progress
- updateFeatureInProgress
- updateFeatureCurrentWaitBlock // after completion of the current update
- updateFeatureNextWaitBlock // after completion of the next update


- setNeedsUpdateFeature:
  - if not in progress:
    - set needs update schedule update after short delay
    - after delay, enter in progress
  - if in progress:
    - set needs update after current update
	
- waitUpdateFeature:
  - if not in progress: call back immediately
  - if in progress, but not needs update after current update: add block to updateFeatureCurrentWaitBlock
  - if in progress and needs update after current update
  
- did finish update:
  - copy state in tmp variables and clear
  - call current wait block
  - send notif
  - set next wait block to current wait block
  - if needs update after current update, setNeedsUpdate
  

- when repo is selected and app is active, ignore all FS events. Update state by timer when idle with increasing interval if nothing changes.
- when repo is not selected and app is active, 


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -




-------------------------------------------------------------------------------

These tasks should be performed both on demand and independently of the UI. 
System should try to take FSEvents as hints, but still rely on its own timers and "isEqual" check for updated state 
(so it does not update again when nothing's changed).


When staging, we want to efficiently refresh stage status without extra expenses like branches and submodules. Should schedule those after some delay.

What about separate update loop with setNeeds* flags? 
- setNeeds* dispatches update if not present.
- delayed updates for needs* flags.
- block callbacks for scheduled updates, but not for the current updates.


Solution 2:

	Selected Repository:

		FS Event:
		+ if ignoring fs events, skip
		+ if there's scheduled update, skip
		+ if there's running update, skip
		+ schedule update after 0.0 seconds.

		Update scheduled:
		+ override delay

		Update started:
		+ if update is running, put into a pending block

		Update finished:
		+ run and clear pending block
		+ if something's changed, schedule an update after 0.0 sec.
		+ if nothing's changed 1st time, schedule an update later after 0.5 sec.
		+ if nothing's changed 2nd time, do not schedule
		+ ignore FS events for 1 second.

		Repo unselected:
		+ do nothing
		
		Window focused:
		+ schedule update after 0.0 seconds
		
	Non-selected Repository:
	
		FS Event:
		+ if ignoring fs events, skip
		+ if there's scheduled update, skip
		+ if there's running update, skip
		+ schedule update after 0.0 seconds.

		Update scheduled:
		+ override delay

		Update started:
		+ if update is running, put into a pending block

		Update finished:
		+ run and clear pending block
		+ if something's changed, schedule an update immediately.
		+ if nothing's changed, do not schedule again.
		+ ignore FS events for 5 seconds.
	
		Repo selected:
		+ reset ignore FS events interval

Solution 1:

1. If FS event kicks in perform the local state update.
2. If FS event kicks in and we have an update scheduled in the future - do nothing.
3. After local state update is finished, schedule another updater after short interval.
4. If nothing has changed since last update, increase the interval and repeat.
5. If interval gets big enough, schedule a delay (to skip remaining ping/pong fs events), but do not update again. And after that delay accept fs events again.
6. For non-selected repos interval cutoff should be bigger than for selected to prevent ping-pong loop with submodules and nested repos.

Alternatively: simply delay ignoring FS events for some time when no actual change was detected. Don't increase that interval, but maybe make the interval bigger for non-selected repos.
