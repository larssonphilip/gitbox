'\" t
.\"     Title: git-tag
.\"    Author: [see the "Author" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 04/24/2010
.\"    Manual: Git Manual
.\"    Source: Git 1.7.1
.\"  Language: English
.\"
.TH "GIT\-TAG" "1" "04/24/2010" "Git 1\&.7\&.1" "Git Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-tag \- Create, list, delete or verify a tag object signed with GPG
.SH "SYNOPSIS"
.sp
.nf
\fIgit tag\fR [\-a | \-s | \-u <key\-id>] [\-f] [\-m <msg> | \-F <file>]
        <tagname> [<commit> | <object>]
\fIgit tag\fR \-d <tagname>\&...
\fIgit tag\fR [\-n[<num>]] \-l [\-\-contains <commit>] [<pattern>]
\fIgit tag\fR \-v <tagname>\&...
.fi
.sp
.SH "DESCRIPTION"
.sp
Adds a tag reference in \&.git/refs/tags/\&.
.sp
Unless \-f is given, the tag must not yet exist in \&.git/refs/tags/ directory\&.
.sp
If one of \-a, \-s, or \-u <key\-id> is passed, the command creates a \fItag\fR object, and requires the tag message\&. Unless \-m <msg> or \-F <file> is given, an editor is started for the user to type in the tag message\&.
.sp
If \-m <msg> or \-F <file> is given and \-a, \-s, and \-u <key\-id> are absent, \-a is implied\&.
.sp
Otherwise just the SHA1 object name of the commit object is written (i\&.e\&. a lightweight tag)\&.
.sp
A GnuPG signed tag object will be created when \-s or \-u <key\-id> is used\&. When \-u <key\-id> is not used, the committer identity for the current user is used to find the GnuPG key for signing\&.
.SH "OPTIONS"
.PP
\-a
.RS 4
Make an unsigned, annotated tag object
.RE
.PP
\-s
.RS 4
Make a GPG\-signed tag, using the default e\-mail address\(aqs key
.RE
.PP
\-u <key\-id>
.RS 4
Make a GPG\-signed tag, using the given key
.RE
.PP
\-f, \-\-force
.RS 4
Replace an existing tag with the given name (instead of failing)
.RE
.PP
\-d
.RS 4
Delete existing tags with the given names\&.
.RE
.PP
\-v
.RS 4
Verify the gpg signature of the given tag names\&.
.RE
.PP
\-n<num>
.RS 4
<num> specifies how many lines from the annotation, if any, are printed when using \-l\&. The default is not to print any annotation lines\&. If no number is given to
\-n, only the first line is printed\&. If the tag is not annotated, the commit message is displayed instead\&.
.RE
.PP
\-l <pattern>
.RS 4
List tags with names that match the given pattern (or all if no pattern is given)\&. Typing "git tag" without arguments, also lists all tags\&.
.RE
.PP
\-\-contains <commit>
.RS 4
Only list tags which contain the specified commit\&.
.RE
.PP
\-m <msg>
.RS 4
Use the given tag message (instead of prompting)\&. If multiple
\-m
options are given, their values are concatenated as separate paragraphs\&. Implies
\-a
if none of
\-a,
\-s, or
\-u <key\-id>
is given\&.
.RE
.PP
\-F <file>
.RS 4
Take the tag message from the given file\&. Use
\fI\-\fR
to read the message from the standard input\&. Implies
\-a
if none of
\-a,
\-s, or
\-u <key\-id>
is given\&.
.RE
.PP
<tagname>
.RS 4
The name of the tag to create, delete, or describe\&. The new tag name must pass all checks defined by
\fBgit-check-ref-format\fR(1)\&. Some of these checks may restrict the characters allowed in a tag name\&.
.RE
.SH "CONFIGURATION"
.sp
By default, \fIgit tag\fR in sign\-with\-default mode (\-s) will use your committer identity (of the form "Your Name <your@email\&.address>") to find a key\&. If you want to use a different default key, you can specify it in the repository configuration as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
[user]
    signingkey = <gpg\-key\-id>
.fi
.if n \{\
.RE
.\}
.sp
.SH "DISCUSSION"
.SS "On Re\-tagging"
.sp
What should you do when you tag a wrong commit and you would want to re\-tag?
.sp
If you never pushed anything out, just re\-tag it\&. Use "\-f" to replace the old one\&. And you\(aqre done\&.
.sp
But if you have pushed things out (or others could just read your repository directly), then others will have already seen the old tag\&. In that case you can do one of two things:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The sane thing\&. Just admit you screwed up, and use a different name\&. Others have already seen one tag\-name, and if you keep the same name, you may be in the situation that two people both have "version X", but they actually have
\fIdifferent\fR
"X"\(aqs\&. So just call it "X\&.1" and be done with it\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
The insane thing\&. You really want to call the new version "X" too,
\fIeven though\fR
others have already seen the old one\&. So just use
\fIgit tag \-f\fR
again, as if you hadn\(aqt already published the old one\&.
.RE
.sp
However, Git does \fBnot\fR (and it should not) change tags behind users back\&. So if somebody already got the old tag, doing a \fIgit pull\fR on your tree shouldn\(aqt just make them overwrite the old one\&.
.sp
If somebody got a release tag from you, you cannot just change the tag for them by updating your own one\&. This is a big security issue, in that people MUST be able to trust their tag\-names\&. If you really want to do the insane thing, you need to just fess up to it, and tell people that you messed up\&. You can do that by making a very public announcement saying:
.sp
.if n \{\
.RS 4
.\}
.nf
Ok, I messed up, and I pushed out an earlier version tagged as X\&. I
then fixed something, and retagged the *fixed* tree as X again\&.

If you got the wrong tag, and want the new one, please delete
the old one and fetch the new one by doing:

        git tag \-d X
        git fetch origin tag X

to get my updated tag\&.

You can test which tag you have by doing

        git rev\-parse X

which should return 0123456789abcdef\&.\&. if you have the new version\&.

Sorry for inconvenience\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
Does this seem a bit complicated? It \fBshould\fR be\&. There is no way that it would be correct to just "fix" it behind peoples backs\&. People need to know that their tags might have been changed\&.
.SS "On Automatic following"
.sp
If you are following somebody else\(aqs tree, you are most likely using tracking branches (refs/heads/origin in traditional layout, or refs/remotes/origin/master in the separate\-remote layout)\&. You usually want the tags from the other end\&.
.sp
On the other hand, if you are fetching because you would want a one\-shot merge from somebody else, you typically do not want to get tags from there\&. This happens more often for people near the toplevel but not limited to them\&. Mere mortals when pulling from each other do not necessarily want to automatically get private anchor point tags from the other person\&.
.sp
You would notice "please pull" messages on the mailing list says repo URL and branch name alone\&. This is designed to be easily cut&pasted to a \fIgit fetch\fR command line:
.sp
.if n \{\
.RS 4
.\}
.nf
Linus, please pull from

        git://git\&.\&.\&.\&./proj\&.git master

to get the following updates\&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
.sp
becomes:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull git://git\&.\&.\&.\&./proj\&.git master
.fi
.if n \{\
.RE
.\}
.sp
.sp
In such a case, you do not want to automatically follow other\(aqs tags\&.
.sp
One important aspect of git is it is distributed, and being distributed largely means there is no inherent "upstream" or "downstream" in the system\&. On the face of it, the above example might seem to indicate that the tag namespace is owned by upper echelon of people and tags only flow downwards, but that is not the case\&. It only shows that the usage pattern determines who are interested in whose tags\&.
.sp
A one\-shot pull is a sign that a commit history is now crossing the boundary between one circle of people (e\&.g\&. "people who are primarily interested in the networking part of the kernel") who may have their own set of tags (e\&.g\&. "this is the third release candidate from the networking group to be proposed for general consumption with 2\&.6\&.21 release") to another circle of people (e\&.g\&. "people who integrate various subsystem improvements")\&. The latter are usually not interested in the detailed tags used internally in the former group (that is what "internal" means)\&. That is why it is desirable not to follow tags automatically in this case\&.
.sp
It may well be that among networking people, they may want to exchange the tags internal to their group, but in that workflow they are most likely tracking with each other\(aqs progress by having tracking branches\&. Again, the heuristic to automatically follow such tags is a good thing\&.
.SS "On Backdating Tags"
.sp
If you have imported some changes from another VCS and would like to add tags for major releases of your work, it is useful to be able to specify the date to embed inside of the tag object\&. The data in the tag object affects, for example, the ordering of tags in the gitweb interface\&.
.sp
To set the date used in future tag objects, set the environment variable GIT_COMMITTER_DATE to one or more of the date and time\&. The date and time can be specified in a number of ways; the most common is "YYYY\-MM\-DD HH:MM"\&.
.sp
An example follows\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ GIT_COMMITTER_DATE="2006\-10\-02 10:31" git tag \-s v1\&.0\&.1
.fi
.if n \{\
.RE
.\}
.sp
.SH "SEE ALSO"
.sp
\fBgit-check-ref-format\fR(1)\&.
.SH "AUTHOR"
.sp
Written by Linus Torvalds <torvalds@osdl\&.org>, Junio C Hamano <gitster@pobox\&.com> and Chris Wright <chrisw@osdl\&.org>\&.
.SH "DOCUMENTATION"
.sp
Documentation by David Greaves, Junio C Hamano and the git\-list <git@vger\&.kernel\&.org>\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
